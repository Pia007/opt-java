

A. Bubble Sort
   - performance degrades quickly as the number of items needed to sort grows
   How it works?
	- as the algo progresses the array is partitioned into a sorted partition and an unsorted partition
        - the partition is logical
		does not create new arrays
		all is done using the array that is being sorted
	- Ex) array of 7 items  {20, 35, -15, 7, 55, 1, -22}
             1. the entire array is initially called the unsorted partition with an index of 6
		- compare item at index 0 vs index 1
			- if index 1 > index 0 --> swap the elements
			- if index 1 < index 0 --> don't do anything, sorting in ascending order
                - increment i to 1
               		- compare item at index 1 vs index 2
                             - 35 > -15 --> swap and incr by 1
			- next 35 > 7 --> swap and incr by 1
			- next 35 > 55 --> do nothing bc 35 < 55, then incr by 1
			- 55 > 1 --> swap, incr by 1
			- 55 > -22 --> swap, inc by 1
              Now that the array has been traversed once, the sort is {20, -15, 7, 35, 1, -22, 55}
              The greatest item in the array is at index -1, 55 so the sorted partition is index 6
	      Set the new unsorted partition index is 5 bc index 6(55) is considered sorted
	     2. Now traverse the unsorted partition starting at 0 and repeated the process until the entire array is
		the sorted partition

   How does it perform?
	a: In-place algo - logically partitioning the array, although some local variables are created
	b: O(n^2) time complexity is quadratic		
		- 100 steps to sort 10 items, 10,000 steps to sore 100 items, 1,000,000 steps to sort 1000 items
	c: degrades quickly
	