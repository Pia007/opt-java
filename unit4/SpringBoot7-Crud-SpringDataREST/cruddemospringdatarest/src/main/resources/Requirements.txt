SPRING BOOT - REAL TIME PROJECT

Spring Data REST
    -- want to create a REST API for another entity - book, customer ..etc
        -- Repeat same code?
    -- Can tell Spring Data JPA
        -- create REST API by using exiting JpaRepository (dev supplies entity type and primary key)
        -- plug in entity type and primary key
        -- create all of the basic CRUD features
    -- can be used with Spring or Spring Boot
    -- leverages existing JpaRepository
        -- extending & adding custom queries with JPQL
        -- Query DSL Domain Specific Language
        -- define custom methods
    -- minimizes boiler-plate code
    -- no extra coding required

    How does Spring Data REST work?
    -- lets you scan your project for JpaRepository
    -- Expose REST APIs for each entity type for your JpaRepository
      ex) public interface EmployeeRepository extends JpaRepository<Employee, Integer> {}
      -- will expose all of the employees endpoints
    -- by default, will create endpoints based on entity type
        -- How?
            -- Simple pluralized form
                -- takes the first character of the entity type as lowercase
                -- adds an "s" to the entity
                    ex) public interface EmployeeRepository extends JpaRepository<Employee, Integer> {}
                    -- creates "/employees"  endpoint

    Spring Data RESt endpoints
        - HATEOAS compliant: Hypermedia as the Engine of Application State
            -- Hypermedia-driven sites provide info to access REST interfaces
                -- meta-data for REST data
                  ex) REST response from GET/employees/3
                    -- return JSON data
                        - the top will have the employee data
                        -- the bottom will have response meta-data or links to that actual entry or data
                  ex) REST response from GET/employees
                    -- return JSON array of all employees objects at the top
                    -- meta-data includes page size, total elements, pages etc at the bottom
            -- also used HAL to format the JSON data that's being returned
                -- Hypertext Application Language data format


Requirements:
1. Create a REST API for Employee Directory
2. Client
    a: GET List of Employees
    b: GET a single Employee by id
    c: POST - Add Employee
    d: PUT -Update Employee
    e: DELETE an Employee

Process:
1. Add Spring Data REST to pom.xml  - THAT'S IT!
2. Delete existing Controller and Service pkgs - if any
3. Run and Test - localhost:8080 and localhost:8080/employees

Extras:
1. Customize endpoint base path - application.properties
    * spring.data.rest.base-path=/magic-api
    localhost:8080/magic-api and localhost:8080/magic-api/employees
2. Using the new base path
    a: Add a new employee
    b: Update an employee - Spring Data REST only uses the id in the URL
        - don't add the id to the body of the request
            ex) localhost:8080/magic-api/employees/3
    c: Delete an employee
ReCAP:
Only need
-- entity: Employee
-- JpaRepository: EmployeeRepository extends JpaRepository
-- Maven POM dependency: spring-boot-starter-data-rest

Application Architecture
Spring Data REST( provides employee endpoints)  <---> Employee Repository <---> Database

**********************************************************************

SPRING DATE REST CONFIGURATION, PAGINATION AND SORTING

English language is too complex for Spring Data REST
    -- mainly complex pluralized forms
    -- must manually specify the plural name
What if wanted to expose a different resource name?
    -- /members instead of /employees
    -- specify plural name/path with an annotation
       @RepositoryRestResource(path="members") ---> http://localhost:8080/members
Pagination - page size
    --returns 1sr 20 elements by default
    -- can navigate to different pages using query params - pages numbers are 0 based or indexed
        http://localhost:8080/members?page=0   will nav to the second page
Configuration - application.properties, examples
    spring.data.rest.base-path
    spring.data.rest.default-page-size
    spring.data.rest.max-page-size
Sorting - can sort by the property names of an entity, ascending is default
    -- Employee entity has firstName, lastName, email
    -- http://localhost:8080/employees?sort=lastName   - ascending
    -- http://localhost:8080/employees?sort=firstName,desc
    -- http://localhost:8080/employees?sort=lastName,firstName,asc   - ln, then fn ascending

Process:
1. Change the Rest resource path in the repository
    @RepositoryRestResource(path="members") and test and then comment it out
2. Change the default page size to 3, test and change to 20
3. Sort by lastname - asc and desc




